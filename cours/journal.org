#+TITLE: Compilation 2020/2021 -- Journal du cours
#+AUTHOR: Adrien Guatto
#+EMAIL: guatto@irif.org
#+LANGUAGE: fr
#+OPTIONS: ^:nil p:nil
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper,11pt]
#+LATEX_HEADER: \usepackage{a4wide}
#+LATEX_HEADER: \usepackage{microtype}
#+LATEX_HEADER: \hypersetup{colorlinks = true}
#+LATEX_HEADER: \usepackage[french]{babel}
# (org-latex-export-to-pdf)
* Cours 1 : Introduction <2020-09-07>
** Présentation
   Bienvenue en Master 1 !

   |-------------------+--------------------------------------------+---------------------+-------|
   | Séance            | Enseignant                                 | Horaire             | Salle |
   |-------------------+--------------------------------------------+---------------------+-------|
   | Cours             | [[mailto:guatto@irif.fr][Adrien Guatto]]   | lundi 16h-18h       |  2035 |
   | Travaux pratiques | [[mailto:haberm@irif.fr][Peter Habermehl]] | vendredi 8h30-10h30 |  2001 |
   |-------------------+--------------------------------------------+---------------------+-------|

   Information pratique : la salle 2001 est réservée de 18h à 20h pour les
   étudiants qui suivent le cours de protocole réseau en distanciel.
** Contenu et objectifs du cours
*** Introduction au cours
    En licence, vous avez acquis les bases de l'informatique : appris à
    programmer dans plusieurs langages, découvert l'algorithmique sous diverses
    formes, vous êtes familiarisés avec l'utilisation d'un système UNIX, etc.

    En master, on ouvre les boîtes noires ! Par exemple, le cours d'architecture
    des ordinateurs vous initie au fonctionnement interne d'un processeur.

    Dans ce cours, on ouvre la boîte noire des langages de programmation :
    comment fonctionne un compilateur ? Comment passer d'un fichier texte
    contenant du code source à un programme que votre processeur peut exécuter ?

    Comprendre le fonctionnement des compilateurs est l'objectif affiché du
    cours. Il y en a un deuxième, un peu caché : vous faire programmer, et
    beaucoup ! Vous allez écrire un compilateur, en OCaml, tout au long du
    semestre, en binôme, de façon guidée. Vous allez pour ce faire utiliser des
    méthodes et outils de développement modernes : gestion de version, tests,
    intégration continue, etc.
*** Pourquoi étudier la compilation ?
    Ce n'est pas une compétence directement mobilisable dans la plupart des
    emplois de développeur, même si la demande pour des experts en compilation
    est forte à l'international (exemple : compilation de JavaScript).

    Mais comprendre comment fonctionne un compilateur vous transformeras en des
    programmeurs plus /mûrs/, qui maîtrisent les fondements de leurs
    outils. C'est une aide concrète lorsqu'on programme, et notamment lorsqu'on
    débogue et qu'on a parfois besoin de regarder "sous le capot".

    De plus, la compilation est un sujet pluridisciplinaire :
    - architecture des ordinateurs,
    - théorie des graphes
    - théorie des langages et automates,
    - sémantique des langages de programmation,
    - génie logiciel,
    - méthodes formelles...
    Vous allez donc mettre en pratique et revisiter certains concepts que vous
    avez vu dans d'autres cours, ce qui peut vous aider à les assimiler !

    Il va sans dire que la réalisation du projet va aussi beaucoup augmenter
    votre expérience de la programmation. Ce sera pour la majorité d'entre vous
    l'occasion de vous confronter pour la première fois à une base de code
    réaliste !
** Fonctionnement du cours
   Vous avez tous reçu une copie de la description du cours (son /syllabus/,
   dans le jargon), aussi disponible en ligne sur la page du cours. Prenons le
   temps de le lire ensemble.

   Il se dégage plusieurs principes.

   - Les séances de cours sont centrées sur la réalisation du projet, qui
     oriente les concepts que je vais présenter et nos discussions. Elles se
     veulent interactives et ouvertes à la discussion.

   - Le projet est structuré en grandes étapes indépendantes, les /jalons/, qui
     prennent la forme de code à trou : il faudra lire autant qu'écrire !

   - Vous aurez les énoncés des jalons rapidement, et chaque séance de cours
     débutera par 15 à 30 minutes de travail collectif au sujet des questions
     que vous aurez préparées au sujet des jalons.

   - Le bon fonctionnement des jalons sera évalué par une batterie de tests
     automatiques.

   Pour que le cours fonctionne, vos enseignants attendent de vous :

   - que vous travailliez de façon continue et régulière tout le semestre,

   - que vous rendiez vos jalons à temps (toutes les trois semaines environ),

   - que vous prêtiez attention à la qualité du code,

   - en cours : que vous preniez des notes tout en réfléchissant et questionnant
     de façon critique la discussion,

   - en TP : que vous posiez des questions et discutiez avec l'enseignant et vos
     camarades,

   - chez vous : que vous lisiez le code du projet ainsi que les documents
     obligatoires et conseillées, que vous programmiez.

   L'évaluation se fera sur votre compréhension du projet, estimée pour moitié
   par la soutenance, pour moitié par un examen. La soutenance est individuelle,
   on vous demandera d'expliquer votre code, et la qualité de celui-ci sera
   prise en compte.
** Introduction à la compilation : le micro-langage Marthe
   Voir le fichier [[file:cours-01/marthe.ml][marthe.ml]].
** Pour la prochaine fois
*** TODO Forker le dépôt Git du projet
    https://gaufre.informatique.univ-paris-diderot.fr/aguatto/compilation-m1-2020
*** TODO Passer votre fork du dépôt en visibilité privée
*** TODO Ajouter l'accès à l'équipe enseignante
    - Adrien Guatto @aguatto
    - Peter Habermehl @habermeh
*** TODO Remplir le fichier AUTEURS du dépôt
*** TODO S'inscrire sur la liste de diffusion du cours
    https://listes.u-paris.fr/wws/info/m1.2020.compilation.info
*** TODO Préparer le prochain cours
**** TODO Lire la documentation de ocamllex
     [[https://caml.inria.fr/pub/docs/manual-ocaml/lexyacc.html]]
**** TODO Lire la documentation de menhir
     [[http://pauillac.inria.fr/~fpottier/menhir/manual.pdf]]
**** TODO Faire les exercices de marthe.ml
**** TODO Vérifier son environnement de développement *avant* le TP
* Cours 2 : Analyse lexicale et syntaxique (1/2) <2020-09-13>
** Retour sur Marthe
   On discute de nouveau du fichier [[file:cours-01/marthe.ml][marthe.ml]].
*** Les exercices concernant la fonction ~lexer~
    Ignorer les tabulations : ajouter '\t' au filtrage.

    Rajouter '-' et '/' : ajouter deux constructeurs au type ~token~, et les cas
    attenants dans le filtrage.

    Ignorer les commentaires : utiliser par exemple une fonction récursive
    interne qui ignorea les caractères compris entre les délimiteurs de
    commentaires.
*** La compilation vers une machine abstraite
    Il faut lire le code de [[file:cours-01/marthe.ml][marthe.ml]], plus
    précisément :
    - la définition des types ~machine~ et ~instruction~ qui décrivent la
      machine abstraite et ses états,
    - les fonctions ~vm_init~ et ~vm_interpret~, surtout ~vm_interpret~ qui
      implémente les transitions de la machine abstraite,
    - la fonction ~compile~, qui traduit un arbre de syntaxe abstraite Marthe en
      une séquence d'instructions pour la machine abstraite.
*** Le parsing de Marthe
    La semaine dernière, nous n'avons pas détaillé la fonction ~parse~.

    Il est temps de nous y intéresser.

    Cette fonction implémente un analyseur syntaxique pour la grammaire de
    Marthe décrite en commentaire par le biais d'un jeu de fonctions
    mutuellement récursives qui consomment progressivement le flot de lexèmes
    fournis à ~parse~.

    (Nous détaillons ensemble le code source de ~parse~.)

    On discute ensuite de la notion de grammaire ambigue, non-ambigue, et l'idée
    de se restreindre à des formes de grammaire spécifiques.
*** Le TP de vendredi
    Ce vendredi, vous allez aborder l'analyse lexicale et syntaxique en
    utilisant des générateurs de code. Il vous faut lire les manuels d'ocamllex
    et menhir pour vous préparer. On reviendra en détail sur le fonctionnement
    de ces outils dans le cours suivant, et on discutera du jalon 1.
** TODO Pour la prochaine fois
*** TODO Faire les questions restantes de [[file:cours-01/marthe.ml][marthe.ml]]
    Il reste le parsing, l'évaluation et la compilation.
*** TODO Vérifier que son environnement de développement est prêt pour le TP
    Avant vendredi : installer OCaml+OPAM, Tuareg, ocamllex, Menhir.
*** TODO Lire l'énoncé du jalon 1, qui sera rendu disponible dans la semaine
    On en discutera au début du cours suivant.
* Cours 3 : Analyse lexicale et syntaxique (2/2) <2020-09-21>
** Introduction à l'analyse lexicale et syntaxique
   Voir les [[file:cours-03/cours-03-parsing.pdf][transparents]].
** Introduction à flap et au Jalon 1
   Voir le [[file:../flap][code]] du compilateur Flap, ainsi que l'énoncé du
   jalon 1, dans [[../jalons/jalon-1.pdf][jalon-1.pdf]].
* Cours 4 : Introduction à la sémantique (1/2) <2020-09-28>
  Voir les
  [[file:cours-04-a-06/cours-04-a-06-intro-semantique-typage.pdf][transparents]].
* Cours 5 : Introduction à la sémantique (2/2) <2020-10-05>
  Voir les
  [[file:cours-04-a-06/cours-04-a-06-intro-semantique-typage.pdf][transparents]].
* Cours 6 : Introduction au typage <2020-10-12>
  Voir les
  [[file:cours-04-a-06/cours-04-a-06-intro-semantique-typage.pdf][transparents]].
* Cours 7 : De Retrolix à x86-64 <2020-10-19>
** La deuxième moitié du cours
   On a fini la première partie du compilateur, dite /partie avant/ (ou
   /frontend/ en anglais), formée de l'analyse lexicale, syntaxique, et du
   typage. Il s'agit de la seule partie où le compilateur est censé rejeter des
   programmes parce qu'ils sont invalides, que ce soit syntaxiquement ou du
   point de vue du typage.

   La partie avant forme à peu près un tiers conceptuel d'un compilateur
   moderne, avec la /partie médiane/ et la /partie arrière/.

   La partie médiane est dédiée aux optimisations indépendantes du processeur
   cible. Nous n'aurons pas le temps de l'aborder ce semestre.

   La partie arrière est dédiée à la production de code machine, ainsi qu'aux
   optimisations dépendant du processeur cible. Nous allons consacrer la
   deuxième partie du semestre à la production de code machine.
** La chaîne de compilation de Flap
   Notre but est de partir de Hopix, langage muni de constructions expressives
   (ordre supérieur, filtrage, récursion...), pour atteindre le code compris par
   notre processeur cible. Dans le cadre de ce cours, on va cibler les
   processeurs de l'architecture Intel/AMD 64 bits, dit /x86-64/.

   Traduire Hopix vers l'assembleur x86-64 en une seule étape serait trop
   complexe. On va donc passer par plusieurs langages intermédiaires, de plus en
   plus pauvre, et qui serviront à décomposer la génération de code en étapes
   individuellees simples. C'est l'approche standard des compilateurs modernes,
   que le source soit de haut niveau (comme OCaml) ou de bas niveau (comme C).

   Dans le cas de Flap, les langages intermédiaires sont Hobix, Fopix et
   Retrolix, avec la chaîne de compilation suivante :

   Hopix → Hobix → Fopix → Retrolix → x86-64.

   Notre but est de réaliser chacune des passes de traduction, en procédant à
   l'envers, c'est à dire en remontant depuis l'assembleur. Toutefois, avant
   d'aborder la traduction de Retrolix vers x86-64, nous allons faire un bref
   parcours des divers langages.
*** Hopix vers Hobix
**** Le langage Hobix
     Hobix est un langage qui est toujours d'ordre supérieur mais sans types de
     données structurés (ni sommes, ni enregistrements, ni références), tout
     comme le filtrage.  En l'échange, il offre des constructions bas niveau qui
     permet de manipuler la mémoire comme un graphe de /blocs/. Un bloc est
     essentiellement un tableau de valeurs.

     L'arbre de syntaxe de Hobix est décrit dans le fichier
     [[file:../flap/src/hobix/hobixAST.ml][hobixAST.ml]]. Un analyseur
     syntaxique vous est fourni (vous n'aurez pas à le programmer vous-même). En
     cas de doute au sujet de la sémantique du langage, il vous faut lire
     [[file:../flap/src/hobix/hobixInterpreter.ml][hobixInterpreter.ml]].

     Attention, *Hobix est un langage non-typé* : un programme Hobix ne dispose
     d'aucune des garanties vues durant le cours de typage. Concrètement, il
     peut produire une erreur de segmentation à l'exécution. Les informations
     relatives au typage ont disparu de l'arbre de syntaxe.
**** La traduction depuis Hopix
     On reviendra sur celle-ci durant le jalon correspondant. Brièvement, elle
     consiste à choisir une représentation sous forme de bloc pour chaque type
     de données structuré d'Hopix, et à exprimer les manipulations des types de
     données structuré d'Hopix (en particulier, le filtrage) en termes de
     primitives de manipulation de blocs de Hobix.

     Par exemple,

     #+BEGIN_SRC
def len (l) =
  case l {
  | Nil => 0
  | Cons (_, xs) => 1 + len (xs)
  }
    #+END_SRC

     devient

 #+BEGIN_SRC
def len (l) =
  if l[0] = 0 then
    0
  else
    let xs = l[2] in
    1 + len (xs)
 #+END_SRC
*** Hobix vers Fopix
**** Le langage Fopix
     Fopix est une variante de Hobix qui ne dispose plus de fonction
     anonyme. Les fonctions ne peuvent être définies qu'à la surface du
     programme, comme dans un langage comme C. Elles peuvent être appelées
     directement par leur nom, ou bien via un pointeur de fonction.

     L'arbre de syntaxe de Hobix est décrit dans le fichier
     [[file:../flap/src/fopix/fopixAST.ml][fopixAST.ml]]. Comme pour Hobix et
     les autres langages intermédiaires, un analyseur syntaxique et un
     interprète de référence vous sont fournis.
**** La traduction depuis Hobix
     Elle consiste principalement à introduire des fermetures explicites, en
     imitant le fonctionnement de la sémantique vue au cours 4.

     Par exemple,

     #+BEGIN_SRC
def add (x) =
  let z = 2 * x in
  fun (y) -> x + y * z
     #+END_SRC

     devient

     #+BEGIN_SRC
def anomymous (y, env) =
  env[2] + y * env[1]

def add (x) =
  let z = 2 * x in
  [ ptr_code(anonymous) ; z ; x ]
     #+END_SRC
*** Fopix vers Retrolix
**** Le langage Retrolix
     Retrolix est un langage légèrement plus expressif que l'assembleur.

     Contrairement à un programme assembleur, un programme Retrolix peut
     définir et appeler des fonctions, avoir un nombre quelconque de variables
     locales (baptisées /pseudo-registres/), et manipuler des littéraux.

     En revanche, un programme Retrolix, comme un programme assembleur, n'a
     accès qu'à des instructions très simples (qu'il s'agisse d'instructions
     arithmétiques et logiques ou bien de contrôle), peut utiliser des registres
     matériels, et doit se plier aux conventions d'appel du système.

     L'arbre de syntaxe de Retrolix est décrit dans le fichier
     [[file:../flap/src/retrolix/retrolixAST.ml][retrolixAST.ml]]. Comme pour
     les autres langages intermédiaires, un analyseur syntaxique et un
     interprète de référence vous sont fournis.
**** La traduction depuis Fopix
     Elle consiste principalement à traduire les constructions de contrôle de
     haut niveau de Fopix (conditionnelles, boucles, appels de fonctions) vers
     du flot de contrôle non-structuré en Hobix, ainsi qu'à expliciter la
     convention d'appel.

     Par exemple,

#+BEGIN_SRC
def fact (n) =
  if n = 0 then 1 else n * fact (n - 1)
#+END_SRC

     devient

#+BEGIN_SRC
def fact ()
  local tmp:
  l0: jumpif eq %rdi, 0 -> l1, l2;
  l1: %rax <- copy 1;
  l3: ret;
  l2: tmp <- copy %rdi;
  l4: %rdi <- sub %rdi, 1;
  l5: fact();
  l6: %rax <- mul tmp, %rax;
  l7: ret;
end
#+END_SRC
*** Retrolix vers x86-64
**** Le langage x86-64
     L'assembleur x86-64 est un langage énorme est très complexe, on en verra
     qu'un tout petit sous-ensemble qu'on détaillera ultérieurement.
**** La traduction depuis Retrolix
     Elle consiste principalement à traduire les instruction bas-niveau
     abstraites de Retrolix vers des instructions concrètes x86-64, ainsi qu'à
     expliciter la gestion de la pile (cf. infra).

     Par exemple,

#+BEGIN_SRC
def fact ()
  local tmp:
  l0: jumpif eq %rdi, 0 -> l1, l2;
  l1: %rax <- copy 1;
  l3: ret;
  l2: tmp <- copy %rdi;
  l4: %rdi <- sub %rdi, 1;
  l5: fact();
  l6: %rax <- mul tmp, %rax;
  l7: ret;
end
#+END_SRC

     devient

#+BEGIN_SRC
fact:
        /* Retrolix function fact. */
        pushq %rbp
        movq %rsp, %rbp
        subq $8, %rsp
        movq %rdi, %r15
        cmpq $0, %r15
        je l1
        jmp l2
l1:
        movq $1, %rax
        addq $8, %rsp
        popq %rbp
        ret
l2:
        movq %rdi, -8(%rbp)
        subq $1, %rdi
        subq $8, %rsp
        call fact
        addq $8, %rsp
        movq -8(%rbp), %r15
        imulq %rax, %r15
        movq %r15, %rax
        addq $8, %rsp
        popq %rbp
        ret
#+END_SRC
** Contexte : culture générale en architecture des processeurs
*** Quelques éléments de contexte
    On doit faire attention à distinguer /architecture/ et /micro-architecture/.

    L'architecture, ou /Instruction Set Architecture/ est une abstraction
    permettant la programmation système ou applicative. Exemple : architecture
    x86-64, architecture ARMv8, architecture RISC-V, etc.

    La micro-architecture est une implémentation (ou famille d'implémentations)
    d'une architecture. Par exemple, la micro-architecture Zen 3 d'AMD pour
    x86-64, la micro-architecture Vortex/Tempest d'Apple pour ARMv8, la
    micro-architecture U8 de SiFive pour RISC-V.

    Par extension, le terme "micro-architecture" désigne également l'étude des
    techniques d'implémentation efficaces des processeurs.

    Dans ce cours, en tant que spécialistes du logiciel, on s'intéressera à
    l'architecture plutôt qu'à la micro-architecture.

    Deux types d'architectures s'affrontent depuis ~1980 : RISC et CISC.

    RISC = /Reduced Instruction Set Computer/. Offre un petit nombre
    d'instructions simples et orthogonales, ce qui permet de simplifier la
    micro-architecture. Exemple : RISC-V, ARM (historiquement).

    CISC = /Complex Instruction Set Computer/. Beaucoup d'instructions baroques
    et complexes, micro-architecture complexe (décodage). Exemple
    paradigmatique : x86 (32 bits) et x86-64. Les ARM modernes s'en rapprochent.

    On va s'intéresser à x86-64, une architecture à la longue évolution.

    #+BEGIN_EXAMPLE
               8086 (16bits)    x86 (32bits)    AMD64 (64bits)
     |—————————————|——————————————|———————————————|—————————————|—————————>
    1970          1980           1990           2000          2010
    #+END_EXAMPLE

    Pourquoi générer du code x86-64 ?

    Inconvénients : complexe, baroque, laid.

    Avantages : réaliste. Vous permet d'exécuter du code sur votre propre PC,
    sans passer par une couche d'émulation. On ne fait pas semblant !

    La documentation à laquelle nous pouvons nous référer :

    - Les [[http://web.cecs.pdx.edu/~apt/cs491/x86-64.pdf][notes d'Andrew
      Tolmach]] sur un tout petit sous-ensemble du jeu d'instructions que nous
      allons utiliser. Leur lecture est *obligatoire*.

    - La documentation combinée d'Intel (5000+ pages), disponible sur la
      [[https://software.intel.com/content/www/us/en/develop/download/intel-64-and-ia-32-architectures-sdm-combined-volumes-1-2a-2b-2c-2d-3a-3b-3c-3d-and-4.html][page]]
      du constructeur.
* Cours 8 : Assembleur x86-64 et Retrolix, bis <2020-11-02>
** Programmation en assembleur x86-64
*** L'état du processeur
    Les instructions x86-64 servent à modifier l'état du processeur qui, en ce
    qui nous concerne, est formé des données suivantes.

    *Attention* : deux syntaxes pour le code assembleur x86-64 existent : Intel
     et GNU/AT&T. Nous utiliserons la syntaxe GNU/AT&T, comme Andrew Tolmach,
     mais beaucoup de documenation utilise la syntaxe Intel.
**** Les registres

     Un registre est un petit emplacement mémoire non-adressable situé
     directement sur le processeur. Y accéder est très rapide.

     En x86-64, on dispose de seize registres généraux de 64 bits, baptisés
     %rax, %rbx, %rcx, %rdx, %rbp, %rsp, %rdi, %rsi, %r8, %r9, %r10, %r11-%r15.

     Il y a des registres 32 bits %eax, %ebx, etc. ainsi que 16 bits %ax, %bx,
     etc. Le contenu de ces petits registres est identique aux bits de poids
     forts de %rax, %rbx, etc. Autrement dit, ces registres sont des /alias/,
     par exemple modifier %ax modifie %eax et modifier %eax modifie %rax.

     En plus, on a des registres spécifiques dans lesquels on ne peut pas lire,
     par exemple %rip le pointeur d'instruction courant, ou %rflags qui contient
     un champ de bits donnant des informations sur les résultats arithmétiques
     (génération d'un overflow, etc.).
**** La mémoire

     Elle est découpée en différentes zones, dont la pile d'exécution.

     Les entiers sont représentés en petit-boutien (/little-endian/), autrement
     dit les bits de poids forts sont stockés aux adresses les plus basses. Pour
     plus de détails, consulter
     [[https://fr.wikipedia.org/wiki/Endianness][Wikipédia]].

     On lit et écrit dans la mémoire principalement via l'instruction ~mov~ :
     ~mov SRC, DST~.

     On peut spécifier une adresse mémoire source *ou* destination via un /mode
     d'adressage/ complexe. Pour ce qui nous occupe, le mode d'adressage le plus
     utile sera ~OFFSET(BASE, INDEX, SCALE)~ où :

     - ~OFFSET~ est une valeur immédiate,

     - ~BASE~ est un registre,

     - ~INDEX~ est un registre optionnel,

     - ~SCALE~ est un entier optionnel pris dans l'ensemble { 1, 2, 4, 8 }.

     Quelques exemples :

     - ~movq $42, %rax~ écrit l'entier 42 dans %rax.

     - ~movq %rbx, -8(%rsp)~ écrit le contenu de %rbx dans la mémoire à
       l'adresse ~%rsp - 8~.

     *Attention* : l'instruction ~mov~ n'autorise pas les transferts de mémoire
     à mémoire. En d'autres termes, un seul des opérandes peut accéder à la
     mémoire par instruction. Par exemple, ~movq (%rax), (%rbx)~ est invalide.

     Il y a plusieurs variantes de l'instruction ~mov~, selon la taille des
     données à transférer : ~movq~, ~movl~, ~movw~, ~movb~. Ici, ~q~ = quad = 64
     bits, ~l~ = long = 32 bits, ~w~ = word = 16 bits, ~b~ = byte = 8 bits.
*** Les instructions
**** Les instructions arithmétiques et logiques
     Les instructions arithmétiques et logiques, comme ~add~, autorisent aussi
     les opérandes mémoires. C'est une des différences entre CISC et RISC.

     Tout comme ~mov~, les instructions arithmétiques et logiques sont
     disponibles en variantes ~q~, ~l~, ~w~ et ~b~.

     Les instructions arithmétiques peuvent modifier le registre ~rflags~, dont
     le contenu est spécifié par la table suivante.

     |-----+-----------------+------------|
     | bit | signification   | mnémonique |
     |-----+-----------------+------------|
     |   0 | Retenue         | CF         |
     |   1 | Parité          | PF         |
     |   6 | Zéro            | ZF         |
     |   7 | Signe (1 = neg) | SF         |
     |  11 | Overflow        | OF         |
     |-----+-----------------+------------|

     Quelques instructions :

     - ~addq SRC, DST~ : calcule ~SRC + DST~ et stocke le résultat dans ~DST~ en
       mettant à jour ~rflags~.

     - ~cmpq SRC1, SRC2~ : calcule ~SRC2 - SRC1~, ignore le résultat mais met à
       jour ~rflags~.

     Je réfère aux notes d'Andrew Tolmach pour détails et autres instructions.
**** La pile
     Une architecture doit également spécifier une /convention d'appel/, qui
     dicte le fonctionnement des appels de fonction dans le but de permettre
     l'interopérabilité entre divers compilateurs, voire langages.

     Nous allons utiliser la convention d'appel dictée par l'interface binaire
     (/application binary interface/, ou ABI) POSIX System V pour x86-64.

     Celle-ci spécifie l'usage d'une pile pour stocker certains arguments de
     fonction, ainsi que les variables locales. Le sommet courant de la pile
     (son adresse) est, par convention, stocké dans le registre %rsp (/register
     stack pointer/, logique !). Cette adresse doit toujours être alignée sur
     huit octets (multiple de huit). La pile croît vers les adresses basses.

     Un appel de fonction stocke ses données dans son /cadre de pile/. Le cadre
     de pile courant est stocké dans le registre %rbp (/register base pointer/).

     Pour travailler sur la pile, on utilise les instructions ~push~ et
     ~pop~. L'instruction ~pushq SRC~ correspond à la séquence d'instructions
     ~subq $8, %rsp; movq %rax, (%rsp)~, l'instruction ~popq DST~ correspond à
     la séquence d'instructions ~movq %rax, -8(%rsp); addq $8, %rsp~.
**** Instructions de contrôle
     Elles permettent de modifier le flot d'exécution (la prochaine instruction
     à exécuter). En voici quelques-unes :

     - ~jmp foo~ : saute inconditionnellement vers ~foo~.

     - ~je foo~ : saute vers ~foo~ si le flag ZF de ~rflags~ est à 1.

     - ~jmp *%rax~ : saute à l'adresse de code contenue par %rax.

     *Attention* : à l'exécution d'une instruction de saut, %rsp+8 doit toujours
     être aligné sur 16 octets. Donc, %rsp doit être aligné sur 16 octets avant
     toute instruction ~call~, puisque celle-ci va pousser l'adresse de retour.

     Encore une fois, je vous renvoie aux notes d'Andrew Tolmach.
*** Quelques exemples
    On a étudié des rudiments de programmation x86-64 lors de la dernière
    séance, et lors du TD. Essayons de mettre en pratique aujourd'hui.
**** Factorielle itérative
     On écrit le code de factorielle dans un style itératif, avec une boucle. Le
     code C, pour se fixer les idées :

 #+BEGIN_SRC C
     int64_t fact(int64_t n) {
       int64_t res = 1;
       while (n > 1) {
         res *= n--;
       }
       return res;
     }
 #+END_SRC
***** Solution
 #+BEGIN_SRC asm
      fact:   movq $1, %rax
      fact0:  cmp $1, %rdi
              jle fact1
              imulq %rdi, %rax
              dec %rdi
              jmp fact0
      fact1:  ret
 #+END_SRC
**** Fonction principale
     On souhaite appeler ~printf()~ pour afficher le résultat de
     ~fact(6)~. Attention aux contraintes d'alignement de l'ABI System V !
***** Solution
 #+BEGIN_SRC asm
     .global main
     main:   subq $8, %rsp
             movq $6, %rdi
             call factr
             movq $msg, %rdi
             movq %rax, %rsi
             call printf
             movq $0, %rdi
             call exit
 #+END_SRC
**** Factorielle récursive naïve.
     On écrit le code de factorielle dans un style récursif naïf, l'équivalent
     du code OCaml suivant :

 #+BEGIN_SRC ocaml
     let rec fact n = if n <= 1 then 1 else n * fact (n - 1)
 #+END_SRC

***** Solution
      En écrivant du code mécaniquement, comme un compilateur très naïf, on
      obtient l'assembleur ci-dessous.

 #+BEGIN_SRC asm
      fact:  pushq %rbp
             movq %rsp, %rbp
             subq $8, %rsp
             movq $1, %rax
             cmp $1, %rdi
             jle fact0
             movq %rdi, -8(%rbp)
             dec %rdi
             call fact
             imulq -8(%rbp), %rax
             addq $8, %rsp
             popq %rbp
             ret
      fact0: movq $1, %rax
             addq $8, %rsp
             popq %rbp
             ret
 #+END_SRC

      *Attention* : dans le code ci-dessus, on a négligé la contrainte
      d'alignement de la pile à chaque call, ne respectant pas strictement l'ABI
      System V. Ce n'est pas gênant dans la mesure où on appelle jamais de
      fonction de la bibliothèque standard ici. Dans votre passe Retrolix vers
      x86-64, vous *devez* respecter cette contrainte.
* Cours 9 : Assembleur x86-64 et Retrolix, ter <2020-11-09>
** Quelques exemples (suite)
*** Factorielle récursive naïve.
    On écrit le code de factorielle dans un style récursif naïf, l'équivalent
    du code OCaml suivant :

#+BEGIN_SRC ocaml
    let rec fact n = if n <= 1 then 1 else n * fact (n - 1)
#+END_SRC

**** Solution
     En écrivant du code mécaniquement, comme un compilateur très naïf, on
     obtient l'assembleur ci-dessous.

#+BEGIN_SRC asm
     factr:  pushq %rbp
             movq %rsp, %rbp
             subq $8, %rsp
             cmp $1, %rdi
             jle factr0
             movq %rdi, -8(%rbp)
             dec %rdi
             call factr
             imulq -8(%rbp), %rax
             addq $8, %rsp
             popq %rbp
             ret
     factr0: movq $1, %rax
             addq $8, %rsp
             popq %rbp
             ret
#+END_SRC

     *Attention* : dans le code ci-dessus, on a négligé la contrainte
     d'alignement de la pile à chaque call, ne respectant pas strictement l'ABI
     System V. Ce n'est pas gênant dans la mesure où on appelle jamais de
     fonction de la bibliothèque standard ici. Dans votre passe Retrolix vers
     x86-64, vous *devez* respecter cette contrainte.
** De Retrolix à x86-64
*** Retrolix
    Le code relatif à Retrolix est contenu dans
    [[file://../flap/src/retrolix][src/retrolix/]]. Commencer par lire l'AST
    présent dans retrolixAST.ml, puis en cas de question, regarder la sémantique
    de référence dictée par l'interprète dans retrolixInterpreter.ml.

    Il s'agit d'un langage presque aussi bas niveau que l'assembleur, mais pas
    tout à fait. Quelques caractéristiques :

    - des registres (x86-64) *et* des variables (locales, globales, paramètres),

    - le registre matériel %r15 est *réservé* (jamais utilisé),

    - respecte la convention d'appel en ce qui concerne les registres (registres
      caller-save vs. callee-save, registre stockant la valeur de retour),

    - un jeu d'instruction bas niveau.

    *Attention* : les six premiers arguments sont passés par %rdi, %rsi, %rdx,
    %rcx, %r8, %r9. Donc les arguments déclarés et passés explicitement en
    Retrolix sont ceux qui viennent des fonctions sources (Fopix) qui avaient
    plus de six arguments au départ !

*** x86-64
    Le code est contenu dans [[file://../flap/src/x86-64][src/x86-64/]], et
    l'AST qui nous intéresse est dans
    [[file://../flap/src/x86-64/x86_64_AST.ml][x86_64_AST.ml]]. Pas d'interprète
    ou parser.

    On a vu les points saillants de l'assembleur x86-64 la dernière fois.

    Remarque : comme on utilise GCC pour l'assemblage et l'édition de liens, nos
    programmes assembleurs doivent disposer d'une fonction main().

    *Attention* : l'AST est *trop permissif* ! Il permet d'écrire du code qui
    n'assemble pas, par exemple ~movq (%rsp), (%rsp)~. Éviter de générer ce
    genre de code fait partie de votre travail.

*** Différences entre Retrolix et x86-64

    - des chaînes litérales en Retrolix,

    - en Retrolix, pas de fonction main(), le point d'entrée du programme est la
      séquence des blocs d'initialisation de ses variables globales,

    - pas de variables en x86-64,

    - jeu d'instructions assez différent : Retrolix est plutôt RISC mais x86-64
      est très CISC ; par exemple :

      * trois adresses vs. deux adresses,

      * modes d'adressage et opérandes mémoires limités en x86-64,

      * bizarreries en x86-64, par exemple la division.

*** Traduire Retrolix vers x86-64
    Certaines des différences que nous venons de décrire ne sont pas
    essentielles, et sont donc déjà traitées pour vous (chaînes litérales,
    génération d'un main, ...). On va se concentrer sur deux points :

    - la traduction des constructions Retrolix en assembleur x86-64,

    - la gestion des variables et de la pile.

    La passe de traduction est dans
    [[file://../flap/src/x86-64/retrolixToX86_64.ml][retrolixToX86_64.ml]]. Vous
    devez remplacer les ~failwith "Students!"~ avec le code approprié.

    Il s'agit essentiellement d'implémenter deux modules, InstructionSelector et
    FrameManager. Le premier se charge de la traduction de construction
    atomiques de Retrolix en x86-64, le second de la gestion de la pile et des
    variables. Le second va naturellement faire appel au premier.

    *Attention* : dans ce jalon, on se concentrera sur la *correction* du code
    généré. Produire du code optimisé est un objectif secondaire.
**** Points à gérer

***** Bases de la gestion de la pile

      Considérons la fonction ci-dessous.

#+BEGIN_SRC
      def f(x, y)
      local a, b, c:
        ...
      end
#+END_SRC

      En suivant l'ABI System V, à quoi doit ressembler son cadre de pile après
      l'exécution de son prologue ? Quel est le code du prologue, d'ailleurs ?
      De l'épilogue ?

****** Indications

     Prologue :

#+BEGIN_SRC asm
       pushq %rbp
       movq %rsp, %rbp
       subq $24, %rsp
#+END_SRC

     Épilogue :

#+BEGIN_SRC asm
       addq $24, %rsp
       popq %rbp
       ret
#+END_SRC

     Disposition de la pile :

     | cadre parent |        |
     |--------------+--------|
     | arg y        |        |
     | arg x        |        |
     | saved %rip   |        |
     | saved %rbp   | <- rbp |
     | var a        |        |
     | var b        |        |
     | var c        | <- rsp |

     Notons que l'ABI nous laisse le choix de l'ordre des variables locales.

***** Bases de la traduction

      Comment traduire les instructions Retrolix suivantes ?

#+BEGIN_SRC asm
        %rax <- load 42;
#+END_SRC

#+BEGIN_SRC asm
        %rax <- add %rax, %rbx;
#+END_SRC

#+BEGIN_SRC asm
        %rax <- add %rbx, %rcx;
#+END_SRC

#+BEGIN_SRC asm
        %rax <- div %rbx, %rcx;
#+END_SRC

      Comment traduire l'instruction suivante, si a est une variable locale (par
      exemple la première) ? Le premier paramètre de la fonction Retrolix
      courante ? Une variable globale ?

#+BEGIN_SRC asm
         a <- load 42;
#+END_SRC

      Dans les instructions ci-dessous, on se place dans le corps d'une fonction
      dont les variables locales sont a, b et c, déclarées dans cet ordre.

#+BEGIN_SRC asm
         %rax <- add %rax, a;
#+END_SRC

#+BEGIN_SRC asm
         a <- add a, %rax;
#+END_SRC

#+BEGIN_SRC asm
         a <- add a, b;
#+END_SRC

#+BEGIN_SRC asm
         a <- add b, c;
#+END_SRC

****** Indications

       Pour les instructions élémentaires :

#+BEGIN_SRC asm
        movq $42, %rax
#+END_SRC

#+BEGIN_SRC asm
        addq %rbx, %rax
#+END_SRC

#+BEGIN_SRC asm
        movq %rbx, %rax
        addq %rcx, %rax
#+END_SRC

#+BEGIN_SRC asm
        movq %rdx, %r15
        movq %rbx, %rax
        cqto
        idivq %rcx
        mocq %r15, %rdx
#+END_SRC

      Traduction de ~a <- load 42~ lorsque ~a~ est :

      - la première variable locale dans la pile

#+BEGIN_SRC asm
         movq $42, -8(%rbp)
#+END_SRC

      - un paramètre Retrolix (le premier)

#+BEGIN_SRC asm
         movq $42, 16(%rbp)
#+END_SRC

      - une variable globale, stockée au label ~a~

#+BEGIN_SRC asm
         movq $42, a
#+END_SRC

      La traduction du reste des exemples :

#+BEGIN_SRC asm
         addq -8(%rbp), %rax
#+END_SRC

#+BEGIN_SRC asm
         addq %rax, -8(%rbp)
#+END_SRC

#+BEGIN_SRC asm
         movq -16(%rbp), %r15
         addq %r15, -8(%rbp)
#+END_SRC

#+BEGIN_SRC asm
         movq -24(%rbp), %r15
         addq -16(%rbp), %r15
         movq %r15, -8(%rbp)
#+END_SRC

***** Convention d'appel

      Comment traduire les appels de fonction ?

#+BEGIN_SRC asm
      def f()
        call g(23, %rax, %rbx)
#+END_SRC

      N'oubliez pas qu'il faut aussi traiter les appels de fonction *terminaux*.

****** Indications

#+BEGIN_SRC asm
f:     pushq %rbp
       movq %rsp, %rbp
       subq $8, %rsp    # sert à aligner la pile sur 16 octets pour le call
       pushq %rbx       # argument 3
       pushq %rax       # argument 2
       pushq $23        # argument 1
       call g           # appel (la pile est bien alignée sur 16 octets !)
       addq $32, %rsp   # libère les arguments sur la pile
       movq %rbp, %rsp
       popq %rbp
       ret
#+END_SRC

#+BEGIN_SRC asm
      def f()
        call g(23, %rax, %rbx) tail
#+END_SRC
* Cours 10 : De Fopix à Retrolix <2020-11-16>
** Où en est-on dans le cours ?
   Vu le temps qu'il nous reste, on va sauter certains jalons, dont celui-ci. Le
   dernier jalon sera consacré à la traduction de Hobix à Fopix, puisqu'elle est
   la plus intéressante, discutée la semaine prochaine.
** Présentation de Fopix
   Lecture de l'AST Fopix présent dans le fichier
   [[file://../flap/src/fopix/fopixAST.ml][fopixAST.ml]].
** Fopix et Retrolix, similarités et différences
*** Similarités
    Langages de premier ordre avec possibilité de saut indirect.

    Litéraux identiques.
*** Différences
    Retrolix a des registres machines.

    Retrolix suit la convention d'appel machine.

    Fopix est un langage à base d'expressions de profondeur arbitraire plutôt
    que d'instructions au format trois adresses.

    Fopix a des && et des || court-circuits.

    Fopix dispose d'instructions de gestion du flot de contrôle structurées.

    Fopix a des déclarations locales internes aux fonctions, tandis que
    Retrolix ne dispose que d'un espace de nom pour toute fonction (ou
    initialiseur de variable globale).

    Plus subtil : Fopix accède à la mémoire à travers des blocs. La syntaxe
    concrète des affectations prend la forme

      block_e[index_e] := val_e

    tandis que les déréférences prennent la forme

      block_e[index_e].

    Ces constructions sont traduites vers des appels à write_block() et
    read_block() dans la syntaxe abstraite, cf. ~fopixInterpreter.ml~.
** Aparté : un détail négligé en Retrolix et x86-64
    Les programmes que nous allons compiler vont reposer sur un exécutif
    (/runtime/), c'est à dire du code d'infrastructure.

    En ce qui nous concerne, ce runtime prendra la forme d'un fichier écrit en C
    et concernera notamment des fonctions utiles à la gestion mémoire.

#+BEGIN_SRC C
      location_t allocate_block(int64_t size);
      value_t read_block(location_t block, int64_t index);
      void write_block(location_t block, int64_t index, value_t v);
#+END_SRC

    Il contient aussi du code d'entrée/sortie, ou de comparaisons de certains
    types de données (notamment les chaînes de caractères).

    *Attention* : la grande différence entre le tas et la pile, en termes de
    gestion de la mémoire, est que les données sur la pile sont libérées
    automatiquement en fonction du flot de contrôle (une fonction libère son
    cadre de pile quand elle retourne à son appelant). Pour libérer la mémoire
    du tas, on utilise typiquement un /garbage-collector/ (ou ramasse-miettes,
    ou glanneur de cellules).

    (Flap ne comprend pas de ramasse-miettes actuellement.)

    Un ramasse-miettes parcourt la mémoire pour détecter si des blocs de mémoire
    ne sont plus /atteignables/. Un bloc est /atteignable/ si l'on peut obtenir
    son adresse en lisant des pointeurs depuis les registres et la pile. Un bloc
    qui n'est pas atteignable peut être libéré, puisque notre programme ne
    pourra plus jamais y accéder.
** Quelles sont les difficultés de la traduction de Fopix en Retrolix ?
*** Passage des expressions au code à trois adresses ; structures de contrôle
    Comment compiler vers Retrolix les expressions Fopix suivantes ?

    On pourra supposer que le résultat de chaque expression doit être stocké
    vers une variable locale baptisée "r" et, bien sûr, utiliser autant de
    variables locales que nécessaire (elles sont là pour ça).

    À ce stade, on ne cherche pas *du tout* à optimiser le code, mais plutôt à
    trouver un schéma de compilation mécanique qui soit facile à implémenter.

    (Les quatre expressions ci-dessous sont indépendantes.)

    ~1 - (3 * 4)~

    ~x >= 0~

    ~if x = 0 then 0 else y / x~

    ~(while (x[0] >= 0) (x[0] := x[0] - 1)); x[0]~
**** Solutions
     Toute instruction Retrolix doit être précédée d'une étiquette, mais on les
     omet ci-dessous les étiquettes superflues. Tous les ~xI~ sont des variables
     locales préalablement déclarées.

     Premier exemple :

#+BEGIN_SRC
       x1 <- copy 1;
       x2 <- copy 3;
       x3 <- copy 4;
       x4 <- mul x2, x3;
       r  <- add x1, x4;
#+END_SRC

     Deuxième exemple :

#+BEGIN_SRC
           x1 <- copy 1;
           x2 <- copy x;
           x3 <- eq x1, x2;
           jumpif eq x3, 0 -> lE, lT
       lT: r <- copy 0;
           jmp lK:
       lE: x4 <- y;
           x5 <- x;
           r <- div x4, x5;
       lK:
#+END_SRC

     Troisième exemple :

#+BEGIN_SRC
       lT: x1 <- read_block(x, 0);
           x2 <- copy 0;
           x3 <- gte x1, x2;
           jumpif eq x3, 0 -> lK, lB
       lB: x4 <- read_block(x, 0);
           x5 <- sub x4, 1;
           write_block(x, 0, x5);
           jump lT
       lK: r <- read_block(x, 0);
#+END_SRC

     *Remarque* : ces solutions sont volontairement naïves. Un attrait des
     compilateurs optimisants est de permettre, au moins dans une certaine
     mesure, de séparer la correction de l'efficicacité. Concrètement, on peut
     générer du code simple qui sera optimisé par une passe ultérieure. En
     particulier, le code montré ci-dessus peut être facilement généré par une
     fonction récursive.
*** Passage à la convention d'appel de la machine
    Fopix dispose du mécanisme d'appel de fonction usuel des langages de
    programmation de haut niveau. Celui-ci est indépendant de l'architecture
    cible. À l'inverse, Retrolix respecte la convention d'appel de x86-64. Une
    étape de la traduction est donc d'implémenter cette traduction.

    Pouvez-vous rappeler la convention d'appel POSIX System-V x86-64 ?

    Les six premiers arguments sont passés dans les registres %rdi, %rsi, %rdx,
    %rcx, %r8 et %r9, les suivants sont passés par la pile de droite à gauche.

    (Cette convention ne concerne que les valeurs entières et pas les flottants,
    ces derniers ne nous concernant pas dans flap.)

    Remarquons que la pile n'est pas encore explicite en Retrolix, qui dispose
    donc d'un mécanisme de passage d'arguments dédié. C'est la passe de Retrolix
    vers x86-64 qui explicite le passage des arguments, comme vous l'avez vu
    lors des cours précédents.

    Comment traduire les expressions suivantes ?

    #+BEGIN_SRC
    f()
    #+END_SRC

    #+BEGIN_SRC
    f(1, 2 + 3)
    #+END_SRC

    #+BEGIN_SRC
    x1 <- copy 1
    x2 <- copy 2
    x3 <- copy 3
    x4 <- add x2, x3
    %rdi <- copy x1
    %rsi <- copy x4
    call f()
    #+END_SRC

    #+BEGIN_SRC
    12 + f(3 * 8)
    #+END_SRC

**** Solutions
     #+BEGIN_SRC
     call f()
     #+END_SRC

     #+BEGIN_SRC
     f(1, 2, 3, y, 5, 6, 40 + 2)
     #+END_SRC

     #+BEGIN_SRC
     x1 <- copy 1
     x2 <- copy 2
     x3 <- copy 3
     x4 <- copy y
     x5 <- copy 5
     x6 <- copy 6
     x7 <- copy 40
     x8 <- copy 2
     x9 <- add x7, x8
     %rdi <- copy x1
     %rsi <- copy x2
     %rdx <- copy x3
     %rcx <- copy x4
     %r8  <- copy x5
     %r9  <- copy x6
     call f(x9)
     #+END_SRC

    #+BEGIN_SRC
    x1 <- copy 12
    x2 <- copy 3
    x3 <- copy 8
    x4 <- add x2, x3
    %rdi <- copy x4
    call f()
    x5 <- copy %rax
    x6 <- add x1, x5
    #+END_SRC
