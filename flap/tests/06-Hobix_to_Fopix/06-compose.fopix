val compose =
  allocate_block (1)
def lambda_2 (closure_1, f, g) =
  val block_3 = allocate_block (3) ;
  val ignore_6 = write_block (block_3, 0, &lambda_1) ;
  val ignore_5 = write_block (block_3, 1, f) ;
  val ignore_4 = write_block (block_3, 2, g) ; block_3
def lambda_1 (closure_2, x) =
  call
  (read_block (read_block (closure_2, 1), 0))
  with
  (
    read_block (closure_2, 1),
    call
    (read_block (read_block (closure_2, 2), 0))
    with
    (read_block (closure_2, 2), x)
  )
val compose =
  val ignore_7 = write_block (compose, 0, &lambda_2) ;
  compose
val id =
  allocate_block (1)
def lambda_3 (closure_8, x) =
  x
val id =
  val ignore_9 = write_block (id, 0, &lambda_3) ; id
val twice =
  allocate_block (2)
def lambda_4 (closure_10, x) =
  (2 * x)
val twice =
  val ignore_12 = write_block (twice, 0, &lambda_4) ;
  val ignore_11 = write_block (twice, 1, &`*`) ; twice
val main =
  val __nothing__ =
    print_int
    (call (read_block (twice, 0)) with (twice, 21))
    ;
  val __nothing__ =
    print_int
    (
      call
      (read_block
      (
        call
        (read_block (compose, 0))
        with
        (compose, id, twice),
        0
      ))
      with
      (
        call
        (read_block (compose, 0))
        with
        (compose, id, twice),
        21
      )
    )
    ;
  val __nothing__ =
    print_int
    (
      call
      (read_block
      (
        call
        (read_block (compose, 0))
        with
        (compose, twice, id),
        0
      ))
      with
      (
        call
        (read_block (compose, 0))
        with
        (compose, twice, id),
        21
      )
    )
    ;
  print_int
  (
    call
    (read_block
    (
      call
      (read_block (compose, 0))
      with
      (compose, twice, twice),
      0
    ))
    with
    (
      call
      (read_block (compose, 0))
      with
      (compose, twice, twice),
      10
    )
  )