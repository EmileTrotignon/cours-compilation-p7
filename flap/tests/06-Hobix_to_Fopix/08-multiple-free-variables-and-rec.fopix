def lambda_4 (closure_1, z) =
  val x = (z + 1) ;
  val y = x ;
  val t = 0 ;
  val g = allocate_block (3) ;
  val f = allocate_block (2) ;
  val g =
    val ignore_11 = write_block (g, 0, &lambda_for_g_2) ;
    val ignore_10 = write_block (g, 1, f) ;
    val ignore_9 = write_block (g, 2, y) ; g
    ;
  val f =
    val ignore_14 = write_block (f, 0, &lambda_for_f_3) ;
    val ignore_13 = write_block (f, 1, z) ; f
    ;
  val block_4 = allocate_block (3) ;
  val ignore_7 = write_block (block_4, 0, &lambda_1) ;
  val ignore_6 = write_block (block_4, 1, g) ;
  val ignore_5 = write_block (block_4, 2, x) ; block_4
def lambda_1 (closure_3, k) =
  (call
  (read_block (read_block (closure_3, 1), 0))
  with
  (read_block (closure_3, 1), k)
  +
  read_block (closure_3, 2))
def lambda_for_g_2 (closure_for_g_8, x) =
  call
  (read_block (read_block (closure_for_g_8, 1), 0))
  with
  (
    read_block (closure_for_g_8, 1),
    (read_block (closure_for_g_8, 2) + x),
    x
  )
def lambda_for_f_3 (closure_for_f_12, a, b) =
  (read_block (closure_for_f_12, 1) + a)
val f =
  val block_2 = allocate_block (1) ;
  val ignore_15 = write_block (block_2, 0, &lambda_4) ;
  block_2
val main =
  print_int
  (
    call
    (read_block (call (read_block (f, 0)) with (f, 21), 0))
    with
    (call (read_block (f, 0)) with (f, 21), 20)
  )