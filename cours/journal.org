#+TITLE: Compilation 2020/2021 -- Journal du cours
#+AUTHOR: Adrien Guatto
#+EMAIL: guatto@irif.org
#+LANGUAGE: fr
#+OPTIONS: ^:nil p:nil
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [a4paper,11pt]
#+LATEX_HEADER: \usepackage{a4wide}
#+LATEX_HEADER: \usepackage{microtype}
#+LATEX_HEADER: \hypersetup{colorlinks = true}
# (org-latex-export-to-pdf)
* Cours 1 : Introduction <2020-09-07>
** Présentation
   Bienvenue en Master 1 !

   [[mailto:guatto@irif.fr][Adrien Guatto]]

   [[http://www.irif.fr/~guatto/][page perso]]

   En TP, Peter Habermehl, qui se présentera.

   Le cours et les TPs auront lieu si tout va bien en présentiel.

   Cours : lundi 16h-18h dans cette salle (2035).

   (Aujourd'hui, 16h-17h30 exceptionnellement.)

   TP : vendredi 8h30-10h30 en 2001 à partir de la semaine prochaine.

   Information pratique : la salle 2001 est réservée de 18h à 20h pour les
   étudiants qui suivent le cours de protocole réseau en distanciel.
** Contenu et objectifs du cours
*** Introduction au cours
    En licence, vous avez acquis les bases de l'informatique : appris à
    programmer dans plusieurs langages, découvert l'algorithmique sous diverses
    formes, vous êtes familiarisés avec l'utilisation d'un système UNIX, etc.

    En master, on ouvre les boîtes noires ! Par exemple, le cours d'architecture
    des ordinateurs vous initie au fonctionnement interne d'un processeur.

    Dans ce cours, on ouvre la boîte noire des langages de programmation :
    comment fonctionne un compilateur ? Comment passer d'un fichier texte
    contenant du code source à un programme que votre processeur peut exécuter ?

    Comprendre le fonctionnement des compilateurs est l'objectif affiché du
    cours. Il y en a un deuxième, un peu caché : vous faire programmer, et
    beaucoup ! Vous allez écrire un compilateur, en OCaml, tout au long du
    semestre, en binôme, de façon guidée. Vous allez pour ce faire utiliser des
    méthodes et outils de développement modernes : gestion de version, tests,
    intégration continue, etc.
*** Pourquoi étudier la compilation ?
    Ce n'est pas une compétence directement mobilisable dans la plupart des
    emplois de développeur, même si la demande pour des experts en compilation
    est forte à l'international (exemple : compilation de JavaScript).

    Mais comprendre comment fonctionne un compilateur vous transformeras en des
    programmeurs plus /mûrs/, qui maîtrisent les fondements de leurs
    outils. C'est une aide concrète lorsqu'on programme, et notamment lorsqu'on
    débogue et qu'on a parfois besoin de regarder "sous le capot".

    De plus, la compilation est un sujet pluridisciplinaire :
    - architecture des ordinateurs,
    - théorie des graphes
    - théorie des langages et automates,
    - sémantique des langages de programmation,
    - génie logiciel,
    - méthodes formelles...
    Vous allez donc mettre en pratique et revisiter certains concepts que vous
    avez vu dans d'autres cours, ce qui peut vous aider à les assimiler !

    Il va sans dire que la réalisation du projet va aussi beaucoup augmenter
    votre expérience de la programmation. Ce sera pour la majorité d'entre vous
    l'occasion de vous confronter pour la première fois à une base de code
    réaliste !
** Fonctionnement du cours
   Vous avez tous reçu une copie de la description du cours (son /syllabus/,
   dans le jargon), aussi disponible en ligne sur la page du cours. Prenons le
   temps de le lire ensemble.

   Il se dégage plusieurs principes.

   - Les séances de cours sont centrées sur la réalisation du projet, qui
     oriente les concepts que je vais présenter et nos discussions. Elles se
     veulent interactives et ouvertes à la discussion.

   - Le projet est structuré en grandes étapes indépendantes, les /jalons/, qui
     prennent la forme de code à trou : il faudra lire autant qu'écrire !

   - Vous aurez les énoncés des jalons rapidement, et chaque séance de cours
     débutera par 15 à 30 minutes de travail collectif au sujet des questions
     que vous aurez préparées au sujet des jalons.

   - Le bon fonctionnement des jalons sera évalué par une batterie de tests
     automatiques.

   Pour que le cours fonctionne, vos enseignants attendent de vous :

   - que vous travailliez de façon continue et régulière tout le semestre,

   - que vous rendiez vos jalons à temps (toutes les trois semaines environ),

   - que vous prêtiez attention à la qualité du code,

   - en cours : que vous preniez des notes tout en réfléchissant et questionnant
     de façon critique la discussion,

   - en TP : que vous posiez des questions et discutiez avec l'enseignant et vos
     camarades,

   - chez vous : que vous lisiez le code du projet ainsi que les documents
     obligatoires et conseillées, que vous programmiez.

   L'évaluation se fera sur votre compréhension du projet, estimée pour moitié
   par la soutenance, pour moitié par un examen. La soutenance est individuelle,
   on vous demandera d'expliquer votre code, et la qualité de celui-ci sera
   prise en compte.
** Introduction à la compilation : le micro-langage Marthe
   Voir le fichier [[file:cours-01/marthe.ml][marthe.ml]].
** Pour la prochaine fois
*** TODO Forker le dépôt Git du projet
    https://gaufre.informatique.univ-paris-diderot.fr/aguatto/compilation-m1-2020
*** TODO Passer votre fork du dépôt en visibilité privée
*** TODO Ajouter l'accès à l'équipe enseignante
    - Adrien Guatto @aguatto
    - Peter Habermehl @habermeh
*** TODO Remplir le fichier AUTEURS du dépôt
*** TODO S'inscrire sur la liste de diffusion du cours
    https://listes.u-paris.fr/wws/info/m1.2020.compilation.info
*** TODO Préparer le prochain cours
**** TODO Lire la documentation de ocamllex
     [[https://caml.inria.fr/pub/docs/manual-ocaml/lexyacc.html]]
**** TODO Lire la documentation de menhir
     [[http://pauillac.inria.fr/~fpottier/menhir/manual.pdf]]
**** TODO Faire les exercices de marthe.ml
**** TODO Vérifier son environnement de développement *avant* le TP
* Cours 2 : Analyse lexicale et syntaxique (1/2) <2020-09-13>
** Retour sur Marthe
   On discute de nouveau du fichier [[file:cours-01/marthe.ml][marthe.ml]].
*** Les exercices concernant la fonction ~lexer~
    Ignorer les tabulations : ajouter '\t' au filtrage.

    Rajouter '-' et '/' : ajouter deux constructeurs au type ~token~, et les cas
    attenants dans le filtrage.

    Ignorer les commentaires : utiliser par exemple une fonction récursive
    interne qui ignorea les caractères compris entre les délimiteurs de
    commentaires.
*** La compilation vers une machine abstraite
    Il faut lire le code de [[file:cours-01/marthe.ml][marthe.ml]], plus
    précisément :
    - la définition des types ~machine~ et ~instruction~ qui décrivent la
      machine abstraite et ses états,
    - les fonctions ~vm_init~ et ~vm_interpret~, surtout ~vm_interpret~ qui
      implémente les transitions de la machine abstraite,
    - la fonction ~compile~, qui traduit un arbre de syntaxe abstraite Marthe en
      une séquence d'instructions pour la machine abstraite.
*** Le parsing de Marthe
    La semaine dernière, nous n'avons pas détaillé la fonction ~parse~.

    Il est temps de nous y intéresser.

    Cette fonction implémente un analyseur syntaxique pour la grammaire de
    Marthe décrite en commentaire par le biais d'un jeu de fonctions
    mutuellement récursives qui consomment progressivement le flot de lexèmes
    fournis à ~parse~.

    (Nous détaillons ensemble le code source de ~parse~.)

    On discute ensuite de la notion de grammaire ambigue, non-ambigue, et l'idée
    de se restreindre à des formes de grammaire spécifiques.
*** Le TP de vendredi
    Ce vendredi, vous allez aborder l'analyse lexicale et syntaxique en
    utilisant des générateurs de code. Il vous faut lire les manuels d'ocamllex
    et menhir pour vous préparer. On reviendra en détail sur le fonctionnement
    de ces outils dans le cours suivant, et on discutera du jalon 1.
** TODO Pour la prochaine fois
*** TODO Faire les questions restantes de [[file:cours-01/marthe.ml][marthe.ml]]
    Il reste le parsing, l'évaluation et la compilation.
*** TODO Vérifier que son environnement de développement est prêt pour le TP
    Avant vendredi : installer OCaml+OPAM, Tuareg, ocamllex, Menhir.
*** TODO Lire l'énoncé du jalon 1, qui sera rendu disponible dans la semaine
    On en discutera au début du cours suivant.
* Cours 3 : Analyse lexicale et syntaxique (2/2) <2020-09-21>
** Introduction à l'analyse lexicale et syntaxique
   Voir les [[file:cours-03/cours-03-parsing.pdf][transparents]].
** Introduction à flap et au Jalon 1
   Voir le [[file:../flap][code]] du compilateur Flap, ainsi que l'énoncé du
   jalon 1, dans [[../jalons/jalon-1.pdf][jalon-1.pdf]].
* Cours 4 : Introduction à la sémantique (1/2) <2020-09-28>
  Voir les
  [[file:cours-04-a-06/cours-04-a-06-intro-semantique-typage.pdf][transparents]].
* Cours 5 : Introduction à la sémantique (2/2) <2020-10-05>
  Voir les
  [[file:cours-04-a-06/cours-04-a-06-intro-semantique-typage.pdf][transparents]].
* Cours 6 : Introduction au typage <2020-10-12>
  Voir les
  [[file:cours-04-a-06/cours-04-a-06-intro-semantique-typage.pdf][transparents]].
* Cours 7 : De Retrolix à x86-64 <2020-10-19>
** La deuxième moitié du cours
   On a fini la première partie du compilateur, dite /partie avant/ (ou
   /frontend/ en anglais), formée de l'analyse lexicale, syntaxique, et du
   typage. Il s'agit de la seule partie où le compilateur est censé rejeter des
   programmes parce qu'ils sont invalides, que ce soit syntaxiquement ou du
   point de vue du typage.

   La partie avant forme à peu près un tiers conceptuel d'un compilateur
   moderne, avec la /partie médiane/ et la /partie arrière/.

   La partie médiane est dédiée aux optimisations indépendantes du processeur
   cible. Nous n'aurons pas le temps de l'aborder ce semestre.

   La partie arrière est dédiée à la production de code machine, ainsi qu'aux
   optimisations dépendant du processeur cible. Nous allons consacrer la
   deuxième partie du semestre à la production de code machine.
** La chaîne de compilation de Flap
   Notre but est de partir de Hopix, langage muni de constructions expressives
   (ordre supérieur, filtrage, récursion...), pour atteindre le code compris par
   notre processeur cible. Dans le cadre de ce cours, on va cibler les
   processeurs de l'architecture Intel/AMD 64 bits, dit /x86-64/.

   Traduire Hopix vers l'assembleur x86-64 en une seule étape serait trop
   complexe. On va donc passer par plusieurs langages intermédiaires, de plus en
   plus pauvre, et qui serviront à décomposer la génération de code en étapes
   individuellees simples. C'est l'approche standard des compilateurs modernes,
   que le source soit de haut niveau (comme OCaml) ou de bas niveau (comme C).

   Dans le cas de Flap, les langages intermédiaires sont Hobix, Fopix et
   Retrolix, avec la chaîne de compilation suivante :

   Hopix → Hobix → Fopix → Retrolix → x86-64.

   Notre but est de réaliser chacune des passes de traduction, en procédant à
   l'envers, c'est à dire en remontant depuis l'assembleur. Toutefois, avant
   d'aborder la traduction de Retrolix vers x86-64, nous allons faire un bref
   parcours des divers langages.
*** Hopix vers Hobix
**** Le langage Hobix
     Hobix est un langage qui est toujours d'ordre supérieur mais sans types de
     données structurés (ni sommes, ni enregistrements, ni références), tout
     comme le filtrage.  En l'échange, il offre des constructions bas niveau qui
     permet de manipuler la mémoire comme un graphe de /blocs/. Un bloc est
     essentiellement un tableau de valeurs.

     L'arbre de syntaxe de Hobix est décrit dans le fichier
     [[file:../flap/src/hobix/hobixAST.ml][hobixAST.ml]]. Un analyseur
     syntaxique vous est fourni (vous n'aurez pas à le programmer vous-même). En
     cas de doute au sujet de la sémantique du langage, il vous faut lire
     [[file:../flap/src/hobix/hobixInterpreter.ml][hobixInterpreter.ml]].

     Attention, *Hobix est un langage non-typé* : un programme Hobix ne dispose
     d'aucune des garanties vues durant le cours de typage. Concrètement, il
     peut produire une erreur de segmentation à l'exécution. Les informations
     relatives au typage ont disparu de l'arbre de syntaxe.
**** La traduction depuis Hopix
     On reviendra sur celle-ci durant le jalon correspondant. Brièvement, elle
     consiste à choisir une représentation sous forme de bloc pour chaque type
     de données structuré d'Hopix, et à exprimer les manipulations des types de
     données structuré d'Hopix (en particulier, le filtrage) en termes de
     primitives de manipulation de blocs de Hobix.

     Par exemple,

     #+BEGIN_SRC
def len (l) =
  case l {
  | Nil => 0
  | Cons (_, xs) => 1 + len (xs)
  }
    #+END_SRC

     devient

 #+BEGIN_SRC
def len (l) =
  if l[0] = 0 then
    0
  else
    let xs = l[2] in
    1 + len (xs)
 #+END_SRC
*** Hobix vers Fopix
**** Le langage Fopix
     Fopix est une variante de Hobix qui ne dispose plus de fonction
     anonyme. Les fonctions ne peuvent être définies qu'à la surface du
     programme, comme dans un langage comme C. Elles peuvent être appelées
     directement par leur nom, ou bien via un pointeur de fonction.

     L'arbre de syntaxe de Hobix est décrit dans le fichier
     [[file:../flap/src/fopix/fopixAST.ml][fopixAST.ml]]. Comme pour Hobix et
     les autres langages intermédiaires, un analyseur syntaxique et un
     interprète de référence vous sont fournis.
**** La traduction depuis Hobix
     Elle consiste principalement à introduire des fermetures explicites, en
     imitant le fonctionnement de la sémantique vue au cours 4.

     Par exemple,

     #+BEGIN_SRC
def add (x) =
  let z = 2 * x in
  fun (y) -> x + y * z
     #+END_SRC

     devient

     #+BEGIN_SRC
def anomymous (y, env) =
  env[2] + y * env[1]

def add (x) =
  let z = 2 * x in
  [ ptr_code(anonymous) ; z ; x ]
     #+END_SRC
*** Fopix vers Retrolix
**** Le langage Retrolix
     Retrolix est un langage légèrement plus expressif que l'assembleur.

     Contrairement à un programme assembleur, un programme Retrolix peut
     définir et appeler des fonctions, avoir un nombre quelconque de variables
     locales (baptisées /pseudo-registres/), et manipuler des littéraux.

     En revanche, un programme Retrolix, comme un programme assembleur, n'a
     accès qu'à des instructions très simples (qu'il s'agisse d'instructions
     arithmétiques et logiques ou bien de contrôle), peut utiliser des registres
     matériels, et doit se plier aux conventions d'appel du système.

     L'arbre de syntaxe de Retrolix est décrit dans le fichier
     [[file:../flap/src/retrolix/retrolixAST.ml][retrolixAST.ml]]. Comme pour
     les autres langages intermédiaires, un analyseur syntaxique et un
     interprète de référence vous sont fournis.
**** La traduction depuis Fopix
     Elle consiste principalement à traduire les constructions de contrôle de
     haut niveau de Fopix (conditionnelles, boucles, appels de fonctions) vers
     du flot de contrôle non-structuré en Hobix, ainsi qu'à expliciter la
     convention d'appel.

     Par exemple,

#+BEGIN_SRC
def fact (n) =
  if n = 0 then 1 else n * fact (n - 1)
#+END_SRC

     devient

#+BEGIN_SRC
def fact ()
  local tmp:
  l0: jumpif eq %rdi, 0 -> l1, l2;
  l1: %rax <- copy 1;
  l3: ret;
  l2: tmp <- copy %rdi;
  l4: %rdi <- sub %rdi, 1;
  l5: fact();
  l6: %rax <- mul tmp, %rax;
  l7: ret;
end
#+END_SRC
*** Retrolix vers x86-64
**** Le langage x86-64
     L'assembleur x86-64 est un langage énorme est très complexe, on en verra
     qu'un tout petit sous-ensemble qu'on détaillera ultérieurement.
**** La traduction depuis Retrolix
     Elle consiste principalement à traduire les instruction bas-niveau
     abstraites de Retrolix vers des instructions concrètes x86-64, ainsi qu'à
     expliciter la gestion de la pile (cf. infra).

     Par exemple,

#+BEGIN_SRC
def fact ()
  local tmp:
  l0: jumpif eq %rdi, 0 -> l1, l2;
  l1: %rax <- copy 1;
  l3: ret;
  l2: tmp <- copy %rdi;
  l4: %rdi <- sub %rdi, 1;
  l5: fact();
  l6: %rax <- mul tmp, %rax;
  l7: ret;
end
#+END_SRC

     devient

#+BEGIN_SRC
fact:
        /* Retrolix function fact. */
        pushq %rbp
        movq %rsp, %rbp
        subq $8, %rsp
        movq %rdi, %r15
        cmpq $0, %r15
        je l1
        jmp l2
l1:
        movq $1, %rax
        addq $8, %rsp
        popq %rbp
        ret
l2:
        movq %rdi, -8(%rbp)
        subq $1, %rdi
        subq $8, %rsp
        call fact
        addq $8, %rsp
        movq -8(%rbp), %r15
        imulq %rax, %r15
        movq %r15, %rax
        addq $8, %rsp
        popq %rbp
        ret
#+END_SRC
** Contexte : culture générale en architecture des processeurs
*** Quelques éléments de contexte
    On doit faire attention à distinguer /architecture/ et /micro-architecture/.

    L'architecture, ou /Instruction Set Architecture/ est une abstraction
    permettant la programmation système ou applicative. Exemple : architecture
    x86-64, architecture ARMv8, architecture RISC-V, etc.

    La micro-architecture est une implémentation (ou famille d'implémentations)
    d'une architecture. Par exemple, la micro-architecture Zen 3 d'AMD pour
    x86-64, la micro-architecture Vortex/Tempest d'Apple pour ARMv8, la
    micro-architecture U8 de SiFive pour RISC-V.

    Par extension, le terme "micro-architecture" désigne également l'étude des
    techniques d'implémentation efficaces des processeurs.

    Dans ce cours, en tant que spécialistes du logiciel, on s'intéressera à
    l'architecture plutôt qu'à la micro-architecture.

    Deux types d'architectures s'affrontent depuis ~1980 : RISC et CISC.

    RISC = /Reduced Instruction Set Computer/. Offre un petit nombre
    d'instructions simples et orthogonales, ce qui permet de simplifier la
    micro-architecture. Exemple : RISC-V, ARM (historiquement).

    CISC = /Complex Instruction Set Computer/. Beaucoup d'instructions baroques
    et complexes, micro-architecture complexe (décodage). Exemple
    paradigmatique : x86 (32 bits) et x86-64. Les ARM modernes s'en rapprochent.

    On va s'intéresser à x86-64, une architecture à la longue évolution.

    #+BEGIN_EXAMPLE
               8086 (16bits)    x86 (32bits)    AMD64 (64bits)
     |—————————————|——————————————|———————————————|—————————————|—————————>
    1970          1980           1990           2000          2010
    #+END_EXAMPLE

    Pourquoi générer du code x86-64 ?

    Inconvénients : complexe, baroque, laid.

    Avantages : réaliste. Vous permet d'exécuter du code sur votre propre PC,
    sans passer par une couche d'émulation. On ne fait pas semblant !

    La documentation à laquelle nous pouvons nous référer :

    - Les [[http://web.cecs.pdx.edu/~apt/cs491/x86-64.pdf][notes d'Andrew
      Tolmach]] sur un tout petit sous-ensemble du jeu d'instructions que nous
      allons utiliser. Leur lecture est *obligatoire*.

    - La documentation combinée d'Intel (5000+ pages), disponible sur la
      [[https://software.intel.com/content/www/us/en/develop/download/intel-64-and-ia-32-architectures-sdm-combined-volumes-1-2a-2b-2c-2d-3a-3b-3c-3d-and-4.html][page]]
      du constructeur.
